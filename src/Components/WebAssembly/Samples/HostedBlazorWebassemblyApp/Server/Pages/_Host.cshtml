@page "/"
@namespace HostedBlazorWebassemblyApp.Server.Pages
@using HostedBlazorWebassemblyApp.Client
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
	<title>HostedBlazorWebassemblyApp</title>
	<base href="/" />
	<link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
	<link href="css/app.css" rel="stylesheet" />
	<link href="HostedBlazorWebassemblyApp.Client.styles.css" rel="stylesheet" />
</head>
<body>
	<div>
		<button id="start" onclick="loadMe()" disabled>Click me to render the App component</button>
	</div>
	<div>
		<button id="stop" onclick="unloadMe()" disabled>Remove app component</button>
	</div>
	<div>
		<label for="increment">Counter increment amount</label>
		<input id="increment" value="0" type="number" step="1" onchange="updateIncrementAmount()" placeholder="Update the increment amount" />
	</div>
	<div id="max-count-reached"></div>
	<script src="_framework/blazor.webassembly.js" autostart="false"></script>
	<script>
		var proxies = [];
		async function loadMe(){
			var component = document.createElement("div");
			proxies.push(await Blazor.renderRootComponent('my-cool-counter', component, { Increment: 2, MaxCount: 20 }));

			document.querySelector('body').appendChild(component);
			document.querySelector('#stop').disabled = false;

			component.addEventListener('MaxCountReached', (event) => { document.querySelector('#max-count-reached').innerText = 'Max count reached!' });
		}

		async function unloadMe(){
			if(proxies.length === 0){
				console.log('No components to remove.');
			}

			const current = proxies.pop();
			const element = current.element;
			
			await current.dispose();
			document.querySelector('body').removeChild(element);

			document.querySelector('#stop').disabled = proxies.length === 0;
		}

		async function updateIncrementAmount(){
			if(proxies.length === 0){
				console.log('No components to update.');
			}
			const increment = document.querySelector('#increment').value;
			for(let proxy of proxies){
				proxy.setParameters({ Increment: Number.parseInt(increment), MaxCount: 20 });
			}
		}

		Blazor.start({})
		.then(() => {
			document.querySelector('#start').disabled = false;
		});
	</script>
</body>
</html>
